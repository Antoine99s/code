import turtle
import random
import time

# Grid config
rows = 20
cols = 20
cell_size = 20
delay = 0.3

# Initialize screen
screen = turtle.Screen()
screen.setup(width=cols*cell_size + 50, height=rows*cell_size + 50)
screen.tracer(0)
screen.bgcolor("white")
screen.title("Conway's Game of Life")

# Create turtle
pen = turtle.Turtle()
pen.penup()
pen.hideturtle()

# Initialize grid with random 0s and 1s
grid = [[random.randint(0, 1) for _ in range(cols)] for _ in range(rows)]

def draw_grid(grid):
    pen.clear()
    for i in range(rows):
        for j in range(cols):
            x = j * cell_size - cols * cell_size // 2
            y = i * cell_size - rows * cell_size // 2
            if grid[i][j] == 1:
                pen.goto(x, y)
                pen.begin_fill()
                for _ in range(4):
                    pen.forward(cell_size)
                    pen.right(90)
                pen.end_fill()
    screen.update()

def count_neighbors(grid, x, y):
    directions = [(-1, -1), (-1, 0), (-1, 1),
                  ( 0, -1),         ( 0, 1),
                  ( 1, -1), ( 1, 0), ( 1, 1)]
    count = 0
    for dx, dy in directions:
        nx, ny = x + dx, y + dy
        if 0 <= nx < rows and 0 <= ny < cols:
            count += grid[nx][ny]
    return count

def next_generation(grid):
    new_grid = [[0 for _ in range(cols)] for _ in range(rows)]
    for i in range(rows):
        for j in range(cols):
            neighbors = count_neighbors(grid, i, j)
            if grid[i][j] == 1:
                if neighbors in [2, 3]:
                    new_grid[i][j] = 1
            else:
                if neighbors == 3:
                    new_grid[i][j] = 1
    return new_grid

# Main loop
while True:
    draw_grid(grid)
    grid = next_generation(grid)
    time.sleep(delay)


# Click to exit
screen.exitonclick()